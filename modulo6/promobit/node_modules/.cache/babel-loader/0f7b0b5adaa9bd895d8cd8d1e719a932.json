{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mariana\\\\Desktop\\\\Mayra-Dias\\\\modulo6\\\\promobit\\\\src\\\\pages\\\\MovieDetails\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Content, MovieCover, MovieDetail, TitleMovie, InfoMovie, Assessment, ImageAssessment, Synopsis, TextSynopsis, PeopleMovieContainer, PeopleMovieContent, TitlePeople, InfoPeople, ContentMidia, CastTitle, CastContainer, CastCard, NameCast, NameCharacter, TrailerTitle, MovieTrailer, RecommendationsTitle, MovieRecommendationsContainer } from \"./styles\";\nimport { useEffect, useState } from \"react\";\nimport { api } from \"../../services/api\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { CardMovie } from \"../../components/CardMovie\";\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport { getYear, format } from \"date-fns\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport ReactPlayer from 'react-player/youtube';\nimport imgNotFound from '../../assets/notfound.png';\nimport imgVideoNotFound from '../../assets/videonotfound.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function MovieDetails(props) {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [movieCurrent, setMovieCurrent] = useState([]);\n  const [movieRecommendations, setMovieRecommendations] = useState([]);\n  const [realeseDate, setRealeaseDate] = useState({});\n  const [castInfo, setCastInfo] = useState([]);\n  const [crewInfo, setCrewInfo] = useState([]);\n  useEffect(async () => {\n    try {\n      await api.get(`movie/${id}?api_key=ca4b9689443e16a5eaca9c48c71bed7e&append_to_response=videos&language=pt-BR`).then(response => setMovieDetails(response.data));\n      await api.get(`movie/${id}/release_dates?api_key=ca4b9689443e16a5eaca9c48c71bed7e`).then(response => {\n        const data = response.data.results;\n\n        for (let obj of data) {\n          if (obj.iso_3166_1 == \"BR\") {\n            // console.log(obj)\n            setRealeaseDate(obj);\n            break;\n          }\n        }\n      });\n      await api.get(`movie/${id}/credits?api_key=ca4b9689443e16a5eaca9c48c71bed7e&language=pt-BR`).then(response => setCastInfo(response.data.cast));\n      await api.get(`movie/${id}/credits?api_key=ca4b9689443e16a5eaca9c48c71bed7e&language=pt-BR`).then(response => {\n        const data = response.data.crew;\n        let filteredData = [];\n\n        for (let obj of data) {\n          if ([\"Characters\", \"Director\", \"Writer\"].includes(obj.job)) {\n            filteredData.push(obj);\n          }\n        }\n\n        setCrewInfo(filteredData);\n      });\n      await api.get(`movie/${id}/recommendations?api_key=ca4b9689443e16a5eaca9c48c71bed7e&language=en-US&page=1`).then(response => setMovieRecommendations(response.data.results));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieCurrent]);\n  const {\n    title,\n    poster_path,\n    vote_average,\n    release_date,\n    runtime,\n    genres,\n    videos\n  } = movieDetails;\n  const dateFormated = release_date ? format(new Date(release_date), \"dd/MM/yyyy\") : \"\";\n  const year = release_date ? getYear(new Date(release_date)) : \"\";\n  const movieHour = runtime ? Math.floor(runtime / 60) : \"\";\n  const movieMin = runtime ? runtime % 60 : \"\";\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(MovieCover, {\n        src: `https://image.tmdb.org/t/p/original/${poster_path}`,\n        alt: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MovieDetail, {\n        children: [/*#__PURE__*/_jsxDEV(TitleMovie, {\n          children: [title, \" (\", year, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(InfoMovie, {\n          children: [realeseDate && realeseDate.iso_3166_1 ? realeseDate.release_dates[0].certification : \"\", \" anos *\", dateFormated, \" *  (BR)  *\", genres ? genres.map((genre, index) => ` ${genre.name}${index + 1 === genres.length ? \" \" : \", \"}`) : \"\", \"*\", movieHour, \"h \", movieMin, \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Assessment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: 65,\n              height: 65\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: vote_average / 100,\n              maxValue: 1,\n              text: `${vote_average * 10}%`,\n              styles: buildStyles({\n                pathColor: '#FFF',\n                textColor: '#14FF00',\n                trailColor: '#14FF00',\n                backgroundColor: '#14FF00'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Avalia\\xE7\\xE3o dos \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 38\n            }, this), \" usu\\xE1rios\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Synopsis, {\n          children: \"Sinopse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TextSynopsis, {\n          children: movieDetails ? movieDetails.overview : \"NÃ£o encontrado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PeopleMovieContainer, {\n          children: crewInfo.map(crew => /*#__PURE__*/_jsxDEV(PeopleMovieContent, {\n            children: [/*#__PURE__*/_jsxDEV(TitlePeople, {\n              children: crew.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(InfoPeople, {\n              children: crew.job\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }, this)]\n          }, crew.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentMidia, {\n      children: [/*#__PURE__*/_jsxDEV(CastTitle, {\n        children: \"Elenco original\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CastContainer, {\n        children: castInfo.map(cast => /*#__PURE__*/_jsxDEV(CastCard, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: cast.profile_path === null ? imgNotFound : `https://image.tmdb.org/t/p/original/${cast.profile_path}`,\n            alt: cast.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NameCast, {\n            children: cast.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NameCharacter, {\n            children: cast.character\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this)]\n        }, cast.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TrailerTitle, {\n        children: \"Trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MovieTrailer, {\n        children: videos && videos.results.length ? /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          width: \"100%\",\n          height: \"100%\",\n          url: `https://www.youtube.com/watch?v=${videos ? videos.results[0].key : \"\"}`,\n          controls: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imgVideoNotFound\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RecommendationsTitle, {\n        children: \"Recomenda\\xE7\\xF5es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MovieRecommendationsContainer, {\n        children: movieRecommendations.map(movie => /*#__PURE__*/_jsxDEV(Link, {\n          style: {\n            textDecoration: 'none'\n          },\n          onClick: () => setMovieCurrent(movie.id),\n          to: `/moviedetails/${movie.id}`,\n          children: /*#__PURE__*/_jsxDEV(CardMovie, {\n            title: movie.title,\n            imagePath: movie.poster_path,\n            dateRelease: movie.release_date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MovieDetails, \"LnYcGrC27JKWUCana2cagepSzy4=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["C:/Users/Mariana/Desktop/Mayra-Dias/modulo6/promobit/src/pages/MovieDetails/index.js"],"names":["Container","Content","MovieCover","MovieDetail","TitleMovie","InfoMovie","Assessment","ImageAssessment","Synopsis","TextSynopsis","PeopleMovieContainer","PeopleMovieContent","TitlePeople","InfoPeople","ContentMidia","CastTitle","CastContainer","CastCard","NameCast","NameCharacter","TrailerTitle","MovieTrailer","RecommendationsTitle","MovieRecommendationsContainer","useEffect","useState","api","Link","useParams","CardMovie","CircularProgressbar","buildStyles","getYear","format","ReactPlayer","imgNotFound","imgVideoNotFound","MovieDetails","props","id","movieDetails","setMovieDetails","movieCurrent","setMovieCurrent","movieRecommendations","setMovieRecommendations","realeseDate","setRealeaseDate","castInfo","setCastInfo","crewInfo","setCrewInfo","get","then","response","data","results","obj","iso_3166_1","cast","crew","filteredData","includes","job","push","error","console","log","title","poster_path","vote_average","release_date","runtime","genres","videos","dateFormated","Date","year","movieHour","Math","floor","movieMin","release_dates","certification","map","genre","index","name","length","width","height","pathColor","textColor","trailColor","backgroundColor","overview","profile_path","character","key","movie","textDecoration"],"mappings":"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","sourcesContent":["import { \r\n    Container,\r\n    Content,\r\n    MovieCover,\r\n    MovieDetail,\r\n    TitleMovie,\r\n    InfoMovie,\r\n    Assessment,\r\n    ImageAssessment,\r\n    Synopsis,\r\n    TextSynopsis, \r\n    PeopleMovieContainer,\r\n    PeopleMovieContent,\r\n    TitlePeople,\r\n    InfoPeople,\r\n    ContentMidia,\r\n    CastTitle,\r\n    CastContainer,\r\n    CastCard,\r\n    NameCast,\r\n    NameCharacter,\r\n    TrailerTitle,\r\n    MovieTrailer,\r\n    RecommendationsTitle,\r\n    MovieRecommendationsContainer,\r\n} from \"./styles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { api } from \"../../services/api\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { CardMovie } from \"../../components/CardMovie\";\r\nimport { CircularProgressbar,buildStyles } from 'react-circular-progressbar';\r\nimport { getYear,format } from \"date-fns\";\r\n\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport ReactPlayer from 'react-player/youtube';\r\n\r\nimport imgNotFound from '../../assets/notfound.png';\r\nimport imgVideoNotFound from '../../assets/videonotfound.png';\r\n\r\nexport function MovieDetails(props) {\r\n    const { id }  = useParams();    \r\n    const [movieDetails, setMovieDetails] = useState([]);\r\n    const [movieCurrent, setMovieCurrent] = useState([]);\r\n    const [movieRecommendations, setMovieRecommendations] = useState([]);\r\n    const [realeseDate,setRealeaseDate] = useState({});\r\n    const [castInfo, setCastInfo] = useState([]);\r\n    const [crewInfo, setCrewInfo] = useState([]);\r\n    \r\n    useEffect(async () => {\r\n        try {\r\n            await api.get(`movie/${id}?api_key=ca4b9689443e16a5eaca9c48c71bed7e&append_to_response=videos&language=pt-BR`)\r\n            .then(response => setMovieDetails((response.data)))\r\n            \r\n            await api.get(`movie/${id}/release_dates?api_key=ca4b9689443e16a5eaca9c48c71bed7e`)\r\n            .then(response => {\r\n                const data = response.data.results;\r\n                \r\n                for(let obj of data) {\r\n                    if (obj.iso_3166_1 == \"BR\") {\r\n                        // console.log(obj)\r\n                        setRealeaseDate(obj)\r\n                        break\r\n                    }\r\n                }\r\n            })\r\n            \r\n            await api.get(`movie/${id}/credits?api_key=ca4b9689443e16a5eaca9c48c71bed7e&language=pt-BR`)\r\n            .then(response => setCastInfo(response.data.cast))\r\n\r\n            await api.get(`movie/${id}/credits?api_key=ca4b9689443e16a5eaca9c48c71bed7e&language=pt-BR`)\r\n            .then(response => {\r\n                const data = response.data.crew\r\n                let filteredData = [];\r\n\r\n                for(let obj of data) {\r\n                    if ([\"Characters\",\"Director\",\"Writer\"].includes(obj.job)) {\r\n                        filteredData.push(obj);\r\n                    }\r\n                }\r\n                setCrewInfo(filteredData);\r\n            })\r\n\r\n            await api.get(`movie/${id}/recommendations?api_key=ca4b9689443e16a5eaca9c48c71bed7e&language=en-US&page=1`)\r\n            .then(response => setMovieRecommendations(response.data.results))\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n            \r\n    }, [movieCurrent]);\r\n    \r\n    const {title,poster_path,vote_average,release_date,runtime ,genres, videos} = movieDetails;\r\n\r\n    const dateFormated = release_date ? format(new Date(release_date), \"dd/MM/yyyy\") : \"\";\r\n    const year = release_date ? getYear(new Date(release_date)): \"\";\r\n    const movieHour = runtime ? Math.floor(runtime/60) : \"\";\r\n    const movieMin = runtime ? runtime % 60 : \"\";\r\n\r\n    return (\r\n        <Container>\r\n            <Content>\r\n            <MovieCover src={`https://image.tmdb.org/t/p/original/${poster_path}`} alt={title} />\r\n            <MovieDetail>\r\n                <TitleMovie>{title} ({year})</TitleMovie>\r\n                <InfoMovie> \r\n                    {realeseDate && realeseDate.iso_3166_1 ? realeseDate.release_dates[0].certification : \"\"} anos \r\n                    * \r\n                    {dateFormated} *  (BR)  * \r\n                    {genres ? genres.map((genre, index) => (` ${genre.name}${index + 1 === genres.length ? \" \" : \", \"}`)): \"\"}* \r\n                    {movieHour}h {movieMin}m\r\n                </InfoMovie>\r\n                <Assessment>\r\n                    <div style={{ width: 65, height: 65 }}>\r\n                        <CircularProgressbar \r\n                            value={vote_average / 100} \r\n                            maxValue={1} \r\n                            text={`${vote_average * 10}%`} \r\n                            styles={buildStyles({\r\n                                pathColor: '#FFF',\r\n                                textColor: '#14FF00',\r\n                                trailColor: '#14FF00',\r\n                                backgroundColor: '#14FF00',\r\n                            })}\r\n                        \r\n                        />   \r\n                    </div>\r\n                    <p>AvaliaÃ§Ã£o dos <br /> usuÃ¡rios</p>\r\n                </Assessment>\r\n            \r\n                <Synopsis>Sinopse</Synopsis>\r\n                <TextSynopsis>{movieDetails ? movieDetails.overview : \"NÃ£o encontrado\"}</TextSynopsis>\r\n            \r\n                    <PeopleMovieContainer>\r\n                        {\r\n                            crewInfo.map(crew => (\r\n                                <PeopleMovieContent key={crew.id}>\r\n                                    <TitlePeople>{crew.name}</TitlePeople>\r\n                                    <InfoPeople>{crew.job}</InfoPeople>\r\n                                </PeopleMovieContent>\r\n                            ))\r\n                        }\r\n\r\n                    </PeopleMovieContainer>\r\n\r\n            </MovieDetail> \r\n            </Content>\r\n            <ContentMidia>\r\n            <CastTitle>Elenco original</CastTitle>   \r\n            <CastContainer>\r\n                {\r\n                    castInfo.map(cast => (\r\n                        <CastCard key={cast.id}>\r\n                        <img src={cast.profile_path === null ? imgNotFound : `https://image.tmdb.org/t/p/original/${cast.profile_path}`} alt={cast.name} />\r\n                        <NameCast>{cast.name}</NameCast>\r\n                        <NameCharacter>{cast.character}</NameCharacter>\r\n                        </CastCard>\r\n                    ))\r\n                }\r\n            </CastContainer>\r\n            <TrailerTitle>\r\n                Trailer\r\n            </TrailerTitle>\r\n\r\n            <MovieTrailer>\r\n                {videos && videos.results.length ? (\r\n                    <ReactPlayer width='100%' height='100%' url={`https://www.youtube.com/watch?v=${videos ? videos.results[0].key : \"\"}`} controls={true} />\r\n                ) : (\r\n                    <>\r\n                        <img src={imgVideoNotFound} />\r\n                    </>\r\n                )}\r\n            </MovieTrailer>\r\n\r\n            <RecommendationsTitle>RecomendaÃ§Ãµes</RecommendationsTitle>\r\n            <MovieRecommendationsContainer>\r\n               {\r\n                    movieRecommendations.map(movie => (\r\n                    <Link style={{textDecoration:'none'}} onClick={() => setMovieCurrent(movie.id)} key={movie.id} to={`/moviedetails/${movie.id}`}>\r\n                        <CardMovie \r\n                            title={movie.title} \r\n                            imagePath={movie.poster_path} \r\n                            dateRelease={movie.release_date} \r\n                        >\r\n                        </CardMovie>\r\n                    </Link>\r\n                    ))\r\n               }\r\n            </MovieRecommendationsContainer>\r\n            </ContentMidia>\r\n        </Container>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}